(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&a(n)}).observe(document,{childList:!0,subtree:!0});function t(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(s){if(s.ep)return;s.ep=!0;const r=t(s);fetch(s.href,r)}})();class d{constructor(e){this.todoService=e,this.tasks=[],this.currentFilter="all"}async loadTasks(){try{return this.tasks=await this.todoService.getTasks(),this.tasks}catch(e){return console.error("Error loading tasks:",e),[]}}async addTask(e){try{return e.id=Date.now().toString(),e.completed=!1,e.createdAt=new Date().toISOString(),this.tasks.push(e),await this.todoService.saveTasks(this.tasks),!0}catch(t){return console.error("Error adding task:",t),!1}}async updateTask(e){try{const t=this.tasks.findIndex(a=>a.id===e.id);return t!==-1?(e.completed=this.tasks[t].completed,e.createdAt=this.tasks[t].createdAt,this.tasks[t]=e,await this.todoService.saveTasks(this.tasks),!0):!1}catch(t){return console.error("Error updating task:",t),!1}}async deleteTask(e){try{return this.tasks=this.tasks.filter(t=>t.id!==e),await this.todoService.saveTasks(this.tasks),!0}catch(t){return console.error("Error deleting task:",t),!1}}async toggleTaskCompletion(e){try{const t=this.tasks.find(a=>a.id===e);return t?(t.completed=!t.completed,await this.todoService.saveTasks(this.tasks),!0):!1}catch(t){return console.error("Error toggling task completion:",t),!1}}getTask(e){return this.tasks.find(t=>t.id===e)}getFilteredTasks(){switch(this.currentFilter){case"active":return this.tasks.filter(e=>!e.completed);case"completed":return this.tasks.filter(e=>e.completed);default:return this.tasks}}setFilter(e){this.currentFilter=e}getTaskStatus(e){if(e.completed)return"completed";const t=new Date(e.deadline),a=new Date,s=t.getTime()-a.getTime(),r=s/(1e3*3600*24);return s<0?"overdue":r<=1?"approaching":"active"}}class c{constructor(e){this.taskManager=e,this.tasksList=document.getElementById("tasks-list"),this.taskForm=document.getElementById("task-form"),this.editModal=document.getElementById("edit-modal"),this.editForm=document.getElementById("edit-task-form"),this.taskCountEl=document.getElementById("task-count")}async handleAddTask(){const e=document.getElementById("task-name"),t=document.getElementById("task-description"),a=document.getElementById("task-deadline"),s={name:e.value.trim(),description:t.value.trim(),deadline:a.value};if(!s.name||!s.description||!s.deadline){this.shakeElement(this.taskForm);return}await this.taskManager.addTask(s)&&(this.renderTasks(),this.resetForm())}async handleEditTask(){const e=document.getElementById("edit-task-id").value,t=document.getElementById("edit-task-name"),a=document.getElementById("edit-task-description"),s=document.getElementById("edit-task-deadline"),r={id:e,name:t.value.trim(),description:a.value.trim(),deadline:s.value};if(!r.name||!r.description||!r.deadline){this.shakeElement(this.editForm);return}await this.taskManager.updateTask(r)&&(this.renderTasks(),this.closeModal())}async handleDeleteTask(e){confirm("Are you sure you want to delete this task?")&&await this.taskManager.deleteTask(e)&&this.renderTasks()}async handleToggleCompletion(e){await this.taskManager.toggleTaskCompletion(e)&&this.renderTasks()}openEditModal(e){const t=this.taskManager.getTask(e);t&&(document.getElementById("edit-task-id").value=t.id,document.getElementById("edit-task-name").value=t.name,document.getElementById("edit-task-description").value=t.description,document.getElementById("edit-task-deadline").value=t.deadline,this.editModal.classList.add("show"))}closeModal(){this.editModal.classList.remove("show")}resetForm(){this.taskForm.reset()}shakeElement(e){e.classList.add("shake"),setTimeout(()=>{e.classList.remove("shake")},500)}renderTasks(){const e=this.taskManager.getFilteredTasks();if(this.tasksList.innerHTML="",this.taskCountEl.textContent=`(${e.length})`,e.length===0){this.renderEmptyState();return}[...e].sort((a,s)=>a.completed!==s.completed?a.completed?1:-1:new Date(a.deadline)-new Date(s.deadline)).forEach(a=>{this.renderTaskCard(a)})}renderTaskCard(e){const t=this.taskManager.getTaskStatus(e),a=new Date(e.deadline),s=this.formatDate(a),r=document.createElement("div");r.className=`task-card ${t}`,r.setAttribute("data-id",e.id),r.innerHTML=`
      <div class="task-header">
        <h3 class="task-title">${e.name}</h3>
        <div class="task-actions">
          <button class="complete-btn" title="${e.completed?"Mark as incomplete":"Mark as complete"}">
            <i class="fas ${e.completed?"fa-times-circle":"fa-check-circle"}"></i>
          </button>
          <button class="edit-btn" title="Edit task">
            <i class="fas fa-edit"></i>
          </button>
          <button class="delete-btn" title="Delete task">
            <i class="fas fa-trash-alt"></i>
          </button>
        </div>
      </div>
      <div class="task-description">${e.description}</div>
      <div class="task-meta">
        <div class="task-deadline">
          <span class="deadline-indicator ${t}"></span>
          <span>${s}</span>
        </div>
        <div class="task-status ${t}">
          ${this.getStatusText(t)}
        </div>
      </div>
    `,r.querySelector(".complete-btn").addEventListener("click",()=>{this.handleToggleCompletion(e.id)}),r.querySelector(".edit-btn").addEventListener("click",()=>{this.openEditModal(e.id)}),r.querySelector(".delete-btn").addEventListener("click",()=>{this.handleDeleteTask(e.id)}),this.tasksList.appendChild(r)}renderEmptyState(){const e=document.createElement("div");e.className="empty-state";let t="No tasks found";this.taskManager.currentFilter==="active"?t="No active tasks":this.taskManager.currentFilter==="completed"&&(t="No completed tasks"),e.innerHTML=`
      <i class="fas fa-clipboard-list"></i>
      <p>${t}</p>
      <p>Add a new task to get started</p>
    `,this.tasksList.appendChild(e)}filterTasks(e){this.taskManager.setFilter(e),this.renderTasks()}formatDate(e){const t={weekday:"short",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return e.toLocaleDateString("en-US",t)}getStatusText(e){switch(e){case"completed":return"Completed";case"overdue":return"Overdue";case"approaching":return"Due soon";default:return"Active"}}}class l{constructor(){this.STORAGE_KEY="tasks.txt"}async getTasks(){try{const e=localStorage.getItem(this.STORAGE_KEY);return e?JSON.parse(e):[]}catch(e){return console.error("Error reading tasks:",e),[]}}async saveTasks(e){try{const t=JSON.stringify(e,null,2);return localStorage.setItem(this.STORAGE_KEY,t),!0}catch(t){return console.error("Error saving tasks:",t),!1}}downloadTasksFile(){try{const e=localStorage.getItem(this.STORAGE_KEY);if(!e)return!1;const t=new Blob([e],{type:"text/plain"}),a=URL.createObjectURL(t),s=document.createElement("a");return s.href=a,s.download=this.STORAGE_KEY,document.body.appendChild(s),s.click(),setTimeout(()=>{document.body.removeChild(s),URL.revokeObjectURL(a)},0),!0}catch(e){return console.error("Error downloading tasks file:",e),!1}}setupFileImport(e,t){e.addEventListener("change",a=>{const s=a.target.files[0];if(!s)return;const r=new FileReader;r.onload=n=>{try{const o=JSON.parse(n.target.result);localStorage.setItem(this.STORAGE_KEY,JSON.stringify(o)),t&&t(o)}catch(o){console.error("Error importing tasks file:",o),alert("Invalid tasks file format")}},r.readAsText(s)})}}document.addEventListener("DOMContentLoaded",()=>{const i=new l,e=new d(i),t=new c(e);e.loadTasks().then(()=>{t.renderTasks()}),document.getElementById("task-form").addEventListener("submit",a=>{a.preventDefault(),t.handleAddTask()}),document.getElementById("edit-task-form").addEventListener("submit",a=>{a.preventDefault(),t.handleEditTask()}),document.querySelector(".close-modal").addEventListener("click",()=>{t.closeModal()}),window.addEventListener("click",a=>{const s=document.getElementById("edit-modal");a.target===s&&t.closeModal()}),document.querySelectorAll(".filter-btn").forEach(a=>{a.addEventListener("click",()=>{const s=a.getAttribute("data-filter");t.filterTasks(s),document.querySelectorAll(".filter-btn").forEach(r=>r.classList.remove("active")),a.classList.add("active")})})});
